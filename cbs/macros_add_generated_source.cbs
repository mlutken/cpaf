
# ----------------------------
# --- Custom command macro ---
# ----------------------------

# --- Paramaters: ---
# SRC <sourceFile> 	: Input file that commands use. Relative to CMAKE_CURRENT_SOURCE_DIR
# OUT <outputFile>	: Output file that commands generate. Relative to CMAKE_CURRENT_BINARY_DIR
# CMD <command1>	: Command to execute. Up to 4 commands can be used
# CMD <command2>	: Command to execute. Up to 4 commands can be used
# CMD <command3>	: Command to execute. Up to 4 commands can be used
# CMD <command4>	: Command to execute. Up to 4 commands can be used
# DEP <depensOnTgt>	: Target this depends on.
# DIR <workingDir>	: Working directory. Only needed if different from CMAKE_CURRENT_SOURCE_DIR
# DUMMY				: Add this if you want this command to generate a dummy target.
#					: Needed if the generated .cpp file is NOT to be added as a source file. For
#					: example when the .cpp file is included via another source file.
# ONLY_IF <varName>	: Command is only added if varName is set.
#
# EXAMPLE:
# ADD_GENERATED_SOURCE (SRC atk/atkmarshal.list
# 						OUT	atkmarshal.c
# 						CMD ${glib-genmarshal_EXECUTABLE} --prefix=atk_marshal _SRC --body > _OUT 
# 						CMD ${glib-genmarshal_EXECUTABLE} --prefix=atk_marshal _SRC --header > ${CMAKE_CURRENT_BINARY_DIR}/atkmarshal.h 
# 						DUMMY 
#						ONLY_IF UNIX )
#
MACRO ( ADD_GENERATED_SOURCE   )  
	# --- Setup ---
	SET ( doAddCommand		1							)
	SET ( tgtType			REAL						)	# Add a "DUMMY" to commad params to make a dummy target.
	SET ( curState			IDLE						)
	SET ( iCmdCount			"0"							)
	SET ( workDir			${CMAKE_CURRENT_SOURCE_DIR}	)
 	SET ( srcFile										)
	SET ( outFile										)
	SET ( depend										)
	SET ( cmdList_1										)
 	SET ( cmdList_2										)
 	SET ( cmdList_3										)
 	SET ( cmdList_4										)

	FOREACH( arg ${ARGN} )
	
		# ----------------------
		# --- Set next state ---
		# ----------------------
		
		SET ( argIsStateChangeCmd	1	)
		
		#				--- CMD --- 
		IF ( ${arg} STREQUAL "CMD" )
			SET ( curState		"read_CMD"	)
			MATH ( EXPR iCmdCount "${iCmdCount} +1" )    
		ELSE ( ${arg} STREQUAL "CMD" )

			#			--- SRC --- 
			IF ( ${arg} STREQUAL "SRC" )
				SET ( curState		"read_SRC"	)
			ELSE ( ${arg} STREQUAL "SRC" )
			#				--- OUT --- 
				IF ( ${arg} STREQUAL "OUT" )
					SET ( curState		"read_OUT"	)
				ELSE ( ${arg} STREQUAL "OUT" )
			#				--- ONLY_IF --- 
					IF ( ${arg} STREQUAL "ONLY_IF" )
						SET ( curState		"read_ONLY_IF"	)
					ELSE ( ${arg} STREQUAL "ONLY_IF" )
				#				--- DIR --- 
						IF ( ${arg} STREQUAL "DIR" )
							SET ( curState		"read_DIR"	)
						ELSE ( ${arg} STREQUAL "DIR" )
				#				--- DEP --- 
							IF ( ${arg} STREQUAL "DEP" )
								SET ( curState		"read_DEP"	)
							ELSE ( ${arg} STREQUAL "DEP" )
				#				--- DUMMY --- Not really a state change, but easiest to cope with here
								IF ( ${arg} STREQUAL "DUMMY" )
									SET ( tgtType		"DUMMY"	)
								ELSE ( ${arg} STREQUAL "DUMMY" )
									SET ( argIsStateChangeCmd	0	)	# Argument was NOT a state change command
								ENDIF ( ${arg} STREQUAL "DUMMY" )
							ENDIF ( ${arg} STREQUAL "DEP" )
						ENDIF ( ${arg} STREQUAL "DIR" )
					ENDIF ( ${arg} STREQUAL "ONLY_IF" )
				ENDIF ( ${arg} STREQUAL "OUT" )
			ENDIF ( ${arg} STREQUAL "SRC" )
		ENDIF ( ${arg} STREQUAL "CMD" )
#		MESSAGE ( STATUS "AA: '${arg}' :STATE: ${curState}" )
#		MESSAGE ( STATUS " '${arg}' : ${iCmdCount} : STATE: ${curState}" )

		# ----------------------
		# --- Read arguments ---
		# ----------------------
		#				--- CMD --- 
		IF ( NOT ${argIsStateChangeCmd} )
			#MESSAGE ( STATUS "SSSSSSSSS: ${arg}" )
			#					--- STATE: read_CMD --- 
			IF ( curState STREQUAL "read_CMD" ) 
				IF ( ${arg} STREQUAL "_SRC" )
					LIST ( APPEND cmdList_${iCmdCount} ${CMAKE_CURRENT_SOURCE_DIR}/${srcFile} )
				ELSE ( ${arg} STREQUAL "_SRC" )
					IF ( ${arg} STREQUAL "_OUT" )
						LIST ( APPEND cmdList_${iCmdCount} ${CMAKE_CURRENT_BINARY_DIR}/${outFile} )
					ELSE ( ${arg} STREQUAL "_OUT" )
						LIST ( APPEND cmdList_${iCmdCount} ${arg} )
					ENDIF ( ${arg} STREQUAL "_OUT" )
				ENDIF ( ${arg} STREQUAL "_SRC" )
			ELSE ( curState STREQUAL "read_CMD" ) 
			
			#					--- STATE: read_SRC --- 
				IF ( curState STREQUAL "read_SRC" ) 
					SET ( srcFile	${arg}	)
				ELSE ( curState STREQUAL "read_SRC" ) 

			#					--- STATE: read_OUT --- 
					IF ( curState STREQUAL "read_OUT" ) 
						SET ( outFile	${arg}	)
					ELSE ( curState STREQUAL "read_OUT" ) 

			#					--- STATE: read_ONLY_IF --- 
						IF ( curState STREQUAL "read_ONLY_IF" ) 
							SET ( doAddCommand ${${arg}}	)
						ELSE ( curState STREQUAL "read_ONLY_IF" ) 

			#					--- STATE: read_DEP --- 
							IF ( curState STREQUAL "read_DEP" ) 
								SET ( depend	${arg}	)
							ELSE ( curState STREQUAL "read_DEP" ) 

			#					--- STATE: read_DIR --- 
								IF ( curState STREQUAL "read_DIR" ) 
									SET ( workDir	${arg}	)
								ENDIF ( curState STREQUAL "read_DIR" ) 
							ENDIF ( curState STREQUAL "read_DEP" ) 
						ENDIF ( curState STREQUAL "read_ONLY_IF" ) 
					ENDIF ( curState STREQUAL "read_OUT" ) 
				ENDIF ( curState STREQUAL "read_SRC" ) 
			ENDIF ( curState STREQUAL "read_CMD" ) 
		ENDIF ( NOT ${argIsStateChangeCmd} )

		#MESSAGE ( STATUS "DD (${arg}): argIsStateChangeCmd: ${argIsStateChangeCmd}" )



		#MESSAGE ( STATUS "SS STATE, COUNT: ${curState}, ${iCmdCount}" )
	
		#MESSAGE ( STATUS "AA ADD_GENERATED_SOURCE_PIPE: ${arg}" )
	ENDFOREACH( arg )
	
# 	MESSAGE ( STATUS ""							)
# 	MESSAGE ( STATUS "outFile : ${outFile}"		)
# 	MESSAGE ( STATUS "srcFile : ${srcFile}"		)
# 	MESSAGE ( STATUS "workDir : ${workDir}"		)
# 	MESSAGE ( STATUS "depend : ${depend}"		)
# 	MESSAGE ( STATUS "CmdCount: ${iCmdCount}"	)
# 	MESSAGE ( STATUS "cmd1: ${cmdList_1}"		)
# 	MESSAGE ( STATUS "cmd2: ${cmdList_2}"		)
# 	MESSAGE ( STATUS "cmd3: ${cmdList_3}"		)
# 	MESSAGE ( STATUS "cmd4: ${cmdList_4}"		)
# 	MESSAGE ( STATUS ""							)

	# --------------------
	# --- Add Commands ---
	# --------------------
	
	IF ( ${doAddCommand} )
		IF ( ${tgtType} STREQUAL "DUMMY" )
			SET ( dummyOutFile		DUMMY_${outFile}	)
			##MESSAGE ( STATUS "RealDummy: DUMMY: ${dummyOutFile}"			)
			IF ( ${iCmdCount} STREQUAL "1" )
				ADD_CUSTOM_COMMAND(
					OUTPUTS				${CMAKE_CURRENT_BINARY_DIR}/${dummyOutFile} 
					SOURCE				${srcFile}
					COMMAND 			${cmdList_1}
					COMMAND				${echo_CMD} // DUMMY for CMake target dependencies > ${CMAKE_CURRENT_BINARY_DIR}/${dummyOutFile} 
					OUTPUT 				${CMAKE_CURRENT_BINARY_DIR}/${dummyOutFile}
					WORKING_DIRECTORY	${workDir}
					DEPENDS				${depend}
				)
			ELSE ( ${iCmdCount} STREQUAL "1" )
				IF ( ${iCmdCount} STREQUAL "2" )
					ADD_CUSTOM_COMMAND(
						OUTPUTS				${CMAKE_CURRENT_BINARY_DIR}/${dummyOutFile} 
						SOURCE				${srcFile}
						COMMAND 			${cmdList_1}
						COMMAND 			${cmdList_2}
						COMMAND				${echo_CMD} // DUMMY for CMake target dependencies > ${CMAKE_CURRENT_BINARY_DIR}/${dummyOutFile} 
						OUTPUT 				${CMAKE_CURRENT_BINARY_DIR}/${dummyOutFile}
						WORKING_DIRECTORY	${workDir}
						DEPENDS				${depend}
					)
				ELSE ( ${iCmdCount} STREQUAL "2" )
					IF ( ${iCmdCount} STREQUAL "3" )
						ADD_CUSTOM_COMMAND(
							OUTPUTS				${CMAKE_CURRENT_BINARY_DIR}/${dummyOutFile} 
							SOURCE				${srcFile}
							COMMAND 			${cmdList_1}
							COMMAND 			${cmdList_2}
							COMMAND 			${cmdList_3}
							COMMAND				${echo_CMD} // DUMMY for CMake target dependencies > ${CMAKE_CURRENT_BINARY_DIR}/${dummyOutFile} 
							OUTPUT 				${CMAKE_CURRENT_BINARY_DIR}/${dummyOutFile}
							WORKING_DIRECTORY	${workDir}
							DEPENDS				${depend}
						)
					ELSE ( ${iCmdCount} STREQUAL "3" )
						ADD_CUSTOM_COMMAND(
							OUTPUTS				${CMAKE_CURRENT_BINARY_DIR}/${dummyOutFile} 
							SOURCE				${srcFile}
							COMMAND 			${cmdList_1}
							COMMAND 			${cmdList_2}
							COMMAND 			${cmdList_3}
							COMMAND 			${cmdList_4}
							COMMAND				${echo_CMD} // DUMMY for CMake target dependencies > ${CMAKE_CURRENT_BINARY_DIR}/${dummyOutFile} 
							OUTPUT 				${CMAKE_CURRENT_BINARY_DIR}/${dummyOutFile}
							WORKING_DIRECTORY	${workDir}
							DEPENDS				${depend}
						)
					ENDIF ( ${iCmdCount} STREQUAL "3" )
				ENDIF ( ${iCmdCount} STREQUAL "2" )
			ENDIF ( ${iCmdCount} STREQUAL "1" )
			# --- Add the DUMMY file to be built ---
			ADD_SOURCE_FILE				( ${CMAKE_CURRENT_BINARY_DIR}/${dummyOutFile}			)
			SET_SOURCE_FILES_PROPERTIES	( ${CMAKE_CURRENT_BINARY_DIR}/${dummyOutFile} GENERATED	)
		ELSE ( ${tgtType} STREQUAL "DUMMY" )
			##MESSAGE ( STATUS "RealDummy: REAL" )
			IF ( ${iCmdCount} STREQUAL "1" )
				ADD_CUSTOM_COMMAND(
					OUTPUTS				${CMAKE_CURRENT_BINARY_DIR}/${outFile} 
					SOURCE				${srcFile}
					COMMAND 			${cmdList_1}
					OUTPUT 				${CMAKE_CURRENT_BINARY_DIR}/${outFile}
					WORKING_DIRECTORY	${workDir}
					DEPENDS				${depend}
				)
			ELSE ( ${iCmdCount} STREQUAL "1" )
				IF ( ${iCmdCount} STREQUAL "2" )
					ADD_CUSTOM_COMMAND(
						OUTPUTS				${CMAKE_CURRENT_BINARY_DIR}/${outFile} 
						SOURCE				${srcFile}
						COMMAND 			${cmdList_1}
						COMMAND 			${cmdList_2}
						OUTPUT 				${CMAKE_CURRENT_BINARY_DIR}/${outFile}
						WORKING_DIRECTORY	${workDir}
						DEPENDS				${depend}
					)
				ELSE ( ${iCmdCount} STREQUAL "2" )
					IF ( ${iCmdCount} STREQUAL "3" )
						ADD_CUSTOM_COMMAND(
							OUTPUTS				${CMAKE_CURRENT_BINARY_DIR}/${outFile} 
							SOURCE				${srcFile}
							COMMAND 			${cmdList_1}
							COMMAND 			${cmdList_2}
							COMMAND 			${cmdList_3}
							OUTPUT 				${CMAKE_CURRENT_BINARY_DIR}/${outFile}
							WORKING_DIRECTORY	${workDir}
							DEPENDS				${depend}
						)
					ELSE ( ${iCmdCount} STREQUAL "3" )
						ADD_CUSTOM_COMMAND(
							OUTPUTS				${CMAKE_CURRENT_BINARY_DIR}/${outFile} 
							SOURCE				${srcFile}
							COMMAND 			${cmdList_1}
							COMMAND 			${cmdList_2}
							COMMAND 			${cmdList_3}
							COMMAND 			${cmdList_4}
							OUTPUT 				${CMAKE_CURRENT_BINARY_DIR}/${outFile}
							WORKING_DIRECTORY	${workDir}
							DEPENDS				${depend}
						)
					ENDIF ( ${iCmdCount} STREQUAL "3" )
				ENDIF ( ${iCmdCount} STREQUAL "2" )
			ENDIF ( ${iCmdCount} STREQUAL "1" )
			# --- Add the file to be built ---
			ADD_SOURCE_FILE				( ${CMAKE_CURRENT_BINARY_DIR}/${outFile}			)
			SET_SOURCE_FILES_PROPERTIES	( ${CMAKE_CURRENT_BINARY_DIR}/${outFile} GENERATED	)
		ENDIF ( ${tgtType} STREQUAL "DUMMY" )
	ENDIF ( ${doAddCommand} )
ENDMACRO( ADD_GENERATED_SOURCE )



