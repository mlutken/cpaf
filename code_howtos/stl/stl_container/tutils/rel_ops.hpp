#ifndef _REL_OPS_H_
#define _REL_OPS_H_
// ****************************************************************************
// CREATED_ON	: 09-07-03
// CREATED_BY	: Martin Lutken
// ****************************************************************************

#include "tutils.h"



_TUTILS_BEGIN_NAMESPACE

_TUTILS_REL_OPS_BEGIN_NAMESPACE

/*** 
Relational operators namespace (tutils::rel_ops).
Is a bit more general than std::rel_ops, which only uses one template parameter 
and thus cannot fx. make operator != for two classes that has defined TYPE1 == TYPE2.

If operators '==' and '<' are defined for the types involved the compiler can 
generate operators '!=', '>', '<=' and '>=' automatically if you put:
using namespace tutils::rel_ops; In your .h .cpp or .hpp file. Note: Here it's
OK to be use the "using namspace" in a header file. Alternatively one can specify
the operators to be generated by writing fx.:
using tutils::rel_ops::operator!=;

NOTE: These templates mach a little greedy. They could be enhanced by some enable_if
template as described in C/C++ Users Journal June 2003, by Järvi, Willcock, Hinnant
and Lumsdaine.
*/

/// General operator '!='. Needs operator '==' for the (upto) two types/classes involved.
template <class T1, class T2>
inline bool		operator!=(const T1& Left, const T2& Right) 
{ 
	return !(Left == Right);
}

/// General operator '>'. Needs operator '<' for the (upto) two types/classes involved.
template <class T1, class T2>
inline bool		operator>(const T1& Left, const T2& Right) 
{
	return Right < Left;		// Operands are just switched
}

/// General operator '<='. Needs operator '<' for the (upto) two types/classes involved.
template <class T1, class T2>
inline bool		operator<=(const T1& Left, const T2& Right) 
{
	return !(Right < Left);		// Operands are just switched
}

/// General operator '>='. Needs operator '<' for the (upto) two types/classes involved.
template <class T1, class T2>
inline bool		operator>=(const T1& Left, const T2& Right) 
{
	return !(Left < Right);
}



_TUTILS_REL_OPS_END_NAMESPACE



_TUTILS_END_NAMESPACE


#endif


